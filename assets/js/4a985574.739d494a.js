"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[534],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>f});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),d=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=d(n),s=i,f=c["".concat(u,".").concat(s)]||c[s]||g[s]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=s;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a[c]="string"==typeof e?e:i,l[1]=a;for(var d=2;d<o;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4208:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=n(8168),i=(n(6540),n(5680));const o={sidebar_position:3},l="Lookup cached debug build",a={unversionedId:"aux-workflows/lookup-cached-debug-build",id:"aux-workflows/lookup-cached-debug-build",title:"Lookup cached debug build",description:"Workflow that calculates the fingerprint of the app and",source:"@site/docs/aux-workflows/lookup-cached-debug-build.mdx",sourceDirName:"aux-workflows",slug:"/aux-workflows/lookup-cached-debug-build",permalink:"/setup-ci/docs/aux-workflows/lookup-cached-debug-build",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Debug build",permalink:"/setup-ci/docs/aux-workflows/build-debug"}},u={},d=[{value:"Usage",id:"usage",level:2},{value:"Detailed behavior",id:"detailed-behavior",level:2},{value:"Input and output",id:"input-and-output",level:3},{value:"Fingerprint",id:"fingerprint",level:3},{value:"Modified and created files",id:"modified-and-created-files",level:3},{value:"Workflow details",id:"workflow-details",level:3},{value:"build-debug-android",id:"build-debug-android",level:4}],p={toc:d},c="wrapper";function g(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"lookup-cached-debug-build"},"Lookup cached debug build"),(0,i.yg)("p",null,"Workflow that calculates the ",(0,i.yg)("a",{parentName:"p",href:"https://expo.dev/blog/fingerprint-your-native-runtime"},"fingerprint")," of the app and\nchecks whether a debug build with the same fingerprint is cached and can be retrieved."),(0,i.yg)("p",null,"This workflow can be triggered by other workflows depending on it."),(0,i.yg)("h2",{id:"usage"},"Usage"),(0,i.yg)("p",null,"This workflow cannot be explicitly specified to be generated using SCI. It will be generated automatically\nif you choose to create workflow depending on it."),(0,i.yg)("h2",{id:"detailed-behavior"},"Detailed behavior"),(0,i.yg)("p",null,"Below you can find detailed information about what the script\ndoes with your project when generating Lookup cached debug build workflow."),(0,i.yg)("h3",{id:"input-and-output"},"Input and output"),(0,i.yg)("p",null,"Input:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"platform: ('android' | 'ios')")," - The platform for which the build should be looked up")),(0,i.yg)("p",null,"Output:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"build-exists: boolean")," - whether the build was found in cache"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"fingerprint: string")," - the fingerprint calculated for specified platform")),(0,i.yg)("h3",{id:"fingerprint"},"Fingerprint"),(0,i.yg)("p",null,"This workflow uses ",(0,i.yg)("a",{parentName:"p",href:"https://expo.dev/blog/fingerprint-your-native-runtime"},"@expo/fingerprint")," to generate\na hash string of your native code (called ",(0,i.yg)("em",{parentName:"p"},"fingerprint"),"). It then checks whether key\n",(0,i.yg)("inlineCode",{parentName:"p"},"${{ inputs.platform }}-debug-build-${{ fingerprint }}")," can be restored from cache."),(0,i.yg)("h3",{id:"modified-and-created-files"},"Modified and created files"),(0,i.yg)("table",null,(0,i.yg)("tr",null,(0,i.yg)("th",{style:{width:"40%"}},"File"),(0,i.yg)("th",null,"Changes")),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,".github/workflows/lookup-cached-debug-build.yml")),(0,i.yg)("td",null,"Contains the CI workflow.")),(0,i.yg)("tr",null,(0,i.yg)("td",null,(0,i.yg)("code",null,"package.json")),(0,i.yg)("td",null,(0,i.yg)("ul",null,(0,i.yg)("li",null,"New script:",(0,i.yg)("code",null,"fingerprint:android: npx expo-updates fingerprint:generate --platform android | jq -r '.hash' | xargs -n 1 echo 'fingerprint:'")),(0,i.yg)("li",null,"New script:",(0,i.yg)("code",null,"fingerprint:ios: npx expo-updates fingerprint:generate --platform ios | jq -r '.hash' | xargs -n 1 echo 'fingerprint:'")))))),(0,i.yg)("h3",{id:"workflow-details"},"Workflow details"),(0,i.yg)("h4",{id:"build-debug-android"},"build-debug-android"),(0,i.yg)("p",null,"The following diagram represents the flow of the ",(0,i.yg)("inlineCode",{parentName:"p"},"lookup-cached-debug-build")," workflow:"),(0,i.yg)("mermaid",{value:'flowchart LR;\n    A["\ud83c\udf3f Setup Node"]--\x3eB["\ud83d\udce6 Install dependencies"];\n    B--\x3eC["\ud83e\uddec Calculate fingerprint"];\n    C--\x3eD["\ud83d\udc1b Lookup debug build in cache"];'}))}g.isMDXComponent=!0}}]);