"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[360],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var o=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=r,y=c["".concat(l,".").concat(g)]||c[g]||d[g]||i;return n?o.createElement(y,a(a({ref:t},u),{},{components:n})):o.createElement(y,a({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var o=n(8168),r=(n(6540),n(5680));const i={sidebar_position:1},a="Getting started",s={unversionedId:"introduction/getting-started",id:"introduction/getting-started",title:"Getting started",description:"In this section you will find information about what is Setup CI and how to use it to quickly bootstrap",source:"@site/docs/introduction/getting-started.mdx",sourceDirName:"introduction",slug:"/introduction/getting-started",permalink:"/setup-ci/docs/introduction/getting-started",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/setup-ci/docs/category/introduction"},next:{title:"Command line options",permalink:"/setup-ci/docs/introduction/command-line-options"}},l={},p=[{value:"What is Setup CI?",id:"what-is-setup-ci",level:2},{value:"Why use Setup CI?",id:"why-use-setup-ci",level:2},{value:"How to use",id:"how-to-use",level:2},{value:"Run with preset",id:"run-with-preset",level:3},{value:"Example usage",id:"example-usage",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(c,(0,o.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"getting-started"},"Getting started"),(0,r.yg)("p",null,"In this section you will find information about what is ",(0,r.yg)("strong",{parentName:"p"},"Setup CI")," and how to use it to quickly bootstrap\nCI/CD workflows in your existing or new React Native project."),(0,r.yg)("admonition",{type:"caution"},(0,r.yg)("p",{parentName:"admonition"},"Currently, Setup CI only supports ",(0,r.yg)("strong",{parentName:"p"},"GitHub Actions")," as a CI/CD provider. Support for other platforms is planned for the future.")),(0,r.yg)("h2",{id:"what-is-setup-ci"},"What is Setup CI?"),(0,r.yg)("p",null,"Setup CI (SCI) is a tool built by ",(0,r.yg)("a",{parentName:"p",href:"https://swmansion.com/"},"Software Mansion")," meant to simplify the process of setting up CI/CD workflows in React Native apps."),(0,r.yg)("h2",{id:"why-use-setup-ci"},"Why use Setup CI?"),(0,r.yg)("p",null,"Setting up CI/CD workflows can be a time-consuming and error-prone process. Additionaly, experience shows that you do it only once in a while and it's easy to forget how to do it properly.\nSCI allows to automate it using best practices to cache as much as possible to reduce used time and resources, allowing you to focus on developing your app instead of configuring pipelines."),(0,r.yg)("h2",{id:"how-to-use"},"How to use"),(0,r.yg)("p",null,"You can use SCI in an existing project or in a new one. Go to the project root directory (where ",(0,r.yg)("inlineCode",{parentName:"p"},"package.json")," is located) and run the following command."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npx setup-ci\n")),(0,r.yg)("p",null,"You will be prompted with a series of questions about the tools you want to set up in your project. After answering them, the tool will:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Generate workflow ",(0,r.yg)("inlineCode",{parentName:"li"},".yml")," files"),(0,r.yg)("li",{parentName:"ul"},"Install all missing necessary dependencies"),(0,r.yg)("li",{parentName:"ul"},"Update configuration files (e.g. ",(0,r.yg)("inlineCode",{parentName:"li"},"package.json"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"app.json"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"eas.json"),") accordingly"),(0,r.yg)("li",{parentName:"ul"},"Generate default configuration for selected tools if needed (e.g. default ",(0,r.yg)("inlineCode",{parentName:"li"},".prettierrc")," for Prettier)"),(0,r.yg)("li",{parentName:"ul"},"Print a list of manual steps needed to finish the setup")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"You can find more details about what files SCI generates and modifies for each supported workflow in ",(0,r.yg)("a",{parentName:"p",href:"/docs/category/workflows"},"Workflows")," section.")),(0,r.yg)("h3",{id:"run-with-preset"},"Run with preset"),(0,r.yg)("p",null,"To skip interactive prompts at the beggining of the script, you can specify your own preset with option flags. For example, to set up workflows for Jest and ESLint, you can run:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"npx setup-ci --preset --jest --lint\n")),(0,r.yg)("admonition",{type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"You can find more information about available option flags in ",(0,r.yg)("a",{parentName:"p",href:"/docs/introduction/command-line-options"},"Command line options")," or using ",(0,r.yg)("inlineCode",{parentName:"p"},"npx setup-ci --help"))),(0,r.yg)("h2",{id:"example-usage"},"Example usage"),(0,r.yg)("p",null,"Let's say we have a React Native project called ",(0,r.yg)("inlineCode",{parentName:"p"},"my-rn-project")," and we want to set up Prettier and Typescript checks to run on every Pull Request. We can use SCI to do it for us."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"cd my-rn-project\nnpx setup-ci --preset --prettier --ts\n")),(0,r.yg)("p",null,"After the command finishes, we obtain some information about what happened. For example, we can see a list of all files that SCI added or modified for us."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash",metastring:"showLineNumbers",showLineNumbers:!0},"\u25bc The following files have been added or modified: \n\nmy-rn-project\n\u251c\u2500\u2500 package.json (~)\n\u251c\u2500\u2500 yarn.lock (~)\n\u251c\u2500\u2500 .github/workflows\n\u2502  \u251c\u2500\u2500 prettier.yml (+)\n\u2502  \u2514\u2500\u2500 typescript.yml (+)\n\u251c\u2500\u2500 .prettierrc (+)\n\u251c\u2500\u2500 .prettierignore (+)\n\u2514\u2500\u2500 .nvmrc (+)\n")),(0,r.yg)("p",null,"We can also see a list of manual steps that we need to perform to finish the setup."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 What next? \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \n\u256f \n\u25ba Couldn't retrieve your project's node version. Generated .nvmrc file with default \nnode version (v20.17.0). Please check if it matches your project and update if necessary. \n\u256e\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n")),(0,r.yg)("p",null,"Let's break down this output to see what exactly happened:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"package.json")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"yarn.lock")," files were modified, because SCI installed some missing dependencies and added scripts to ",(0,r.yg)("inlineCode",{parentName:"li"},"package.json")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},".github/workflows")," directory was created with two files: ",(0,r.yg)("inlineCode",{parentName:"li"},"prettier.yml")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"typescript.yml")," - these are the CI workflows that SCI generated for Prettier and Typescript checks"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},".prettierrc")," and ",(0,r.yg)("inlineCode",{parentName:"li"},".prettierignore")," files were added - these are the default configuration files for Prettier which SCI added because no Prettier configuration was detected in the project"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},".nvmrc"),' file was added - this is because no file with node version was found. We can also see that in the "What next?" list, SCI\nsuggests verifying that the default node version in ',(0,r.yg)("inlineCode",{parentName:"li"},".nvmrc")," matches the project's requirements")),(0,r.yg)("p",null,"This all looks great, we can also verify how the workflows actually look like. Let's inspect ",(0,r.yg)("inlineCode",{parentName:"p"},".github/workflows/prettier.yml"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/prettier.yml" showLineNumbers',title:'".github/workflows/prettier.yml"',showLineNumbers:!0},"name: Prettier check\n\non:\n  pull_request:\n\njobs:\n  prettier-check:\n    name: Prettier check\n    runs-on: ubuntu-latest\n    steps:\n      - name: \ud83c\udfd7 Setup repo\n        uses: actions/checkout@v4\n\n      - name: \ud83c\udf3f Setup Node\n        uses: actions/setup-node@v4\n        with:\n          node-version-file: '.nvmrc'\n          cache: 'yarn'\n\n      - name: \ud83d\udce6 Install dependencies\n        run: yarn install --immutable\n\n      - name: \u2728 Run Prettier check\n        run: yarn prettier:check\n")),(0,r.yg)("p",null,"Seems to be a reasonable GitHub Actions workflow! For more explanation about SCI and specific workflows, check out the following sections!"))}d.isMDXComponent=!0}}]);